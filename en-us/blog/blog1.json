{
  "filename": "blog1.md",
  "__html": "<h1>Kruise Controller Classification Guidance</h1>\n<p>Kubernetes does not provide a clear guidance about which controller is the best fit for\ndifferent applications. Sometimes, this does not bother users if they understand\nboth the application and workload well. For example, users typically know when to choose\n<code>Job/CronJob</code> or <code>DaemonSet</code> since their concepts are straightforward - the former is designed\nfor temporal batch style applications and the latter is suitable for long running Pods\nwhich are needed in every node. On the other hand, the usage boundary between <code>Deployment</code> and\n<code>StatefulSet</code> is vague. An application managed by a <code>Deployment</code> conceptually can be\nmanaged by a <code>StatefulSet</code> as well, the opposite may also apply as long as the Pod\n<code>OrderReady</code> capability is not mandatory. Further mores, as more and more customized\ncontrollers/operators become available in Kubernetes community, finding suitable controller\ncan be a nonnegligible user problem especially when some controllers have functional overlaps.</p>\n<p>Kruise does not aim to resolve the problem, but it attempts to establish a\nclassification mechanism for existing workload controllers so that user can more easily\nunderstand the use cases of them. The first and most intuitive criterion for classification\nis the controller name.</p>\n<h3>Controller Name Convention</h3>\n<p>An easily understandable controller name can certainly improve adoption. After consulting\nwith many internal/external Kubernetes users, we decide to use the following naming\nconventions in Kruise. Note that these conventions can be applied to upstream\ncontrollers as well.</p>\n<ul>\n<li>\n<p><strong>Set</strong> -suffix names: This type of controller manages Pods directly. Examples\ninclude <code>Advanced StatefulSet</code>, <code>ReplicaSet</code> and <code>SidecarSet</code>. It supports\nvarious depolyment/rollout strategies in Pod level;</p>\n</li>\n<li>\n<p><strong>Deployment</strong> -suffix names: This type of controller does not manage Pods\ndirectly. Instead, it manages one or many <strong>Set</strong> -suffix workload instances which are\ncreated on behalf of one application. The controller can provide capabilities\nto orchestrate the deployment/rollout of multiple instances. For example, <code>Deployment</code>\nmanages <code>ReplicaSet</code> and provides rollout capability which is not available in <code>ReplicaSet</code>.\n<code>UnitedDeployment</code> (planned in <a href=\"(https://github.com/openkruise/kruise/projects)\">M3 release</a>)\nmanages multiple <code>StatefulSet</code> created in respect of multiple domains\n(i.e., fault domains) within one cluster;</p>\n</li>\n<li>\n<p><strong>Job</strong> -suffix names: This type of controller manages batch style applications with\ndifferent depolyment/rollout strategies. For example, <code>BroadcastJob</code> distributes a\none-time Pod to every node in the cluster.</p>\n</li>\n</ul>\n<p><strong>Set</strong>, <strong>Deployment</strong> and <strong>Job</strong> are widely adopted terms in Kubernetes community,\nKruise closely follows them with certain extensions.</p>\n<p>Can we further distinguish controllers with the same suffix? Normally the string prior to\nsuffix should be self-explainable, but in many cases it is hard to find a right term to\ndescribe what the controller does. Check to see how <code>StatefulSet</code> is originated in\nthis <a href=\"https://github.com/kubernetes/kubernetes/issues/27430\">thread</a>. It takes four\nmonths for community to decide to use the name <code>StatefulSet</code> to replace the original\nname <code>PetSet</code>. Some people still think it is a hard-to-understand name when looking\nat its API documentation. This example showcases that sometimes a well thought out name\nmay not be helpful to distinguish controllers. Again, Kruise does not plan to resolve\nthis problem. As an incremental effort, Kruise considers the following criterion to help classify\n<strong>Set</strong> -suffix controllers.</p>\n<h3>Fixed Pod Name</h3>\n<p>One unique property of <code>StatefulSet</code> is that it maintains consistent identities for\nPod network and storage. Essentially, this is done by fixing Pod names.\nPod name can identity both network and storage since it is part of DNS record and\ncan be used to name Pod volume claim. Why is this property needed given that all Pods in\n<code>StatefulSet</code> are created from the same Pod template?\nA well known use case is to manage distributed coordination server application such as\netcd or Zookeeper. This type of application requires the cluster member\n(i.e., the Pod) to access the same data (saved in the Pod volume) whenever a member is\nreconstructed upon failure, in order to function correctly. To differentiate the concept\nof <code>State</code> in Kubernetes controllers from the same term used in other computer science areas,\nI'd rather associate <code>State</code> with Pod name. That being said, controllers\nlike <code>ReplicaSet</code> and <code>DaemonSet</code> are <code>Stateless</code> since they don't require to reuse the\nold name when Pod is recreated.</p>\n<p>Supporting <code>Stateful</code> does imply inflexibility for controller. <code>StatefulSet</code> relies on ordinal\nnumbers to implement fixing Pod names. The workload rollout and scaling\nhas to be done in a strict order. As a consequence, some useful enhancements to <code>StatefulSet</code>\nbecome impossible. For example,</p>\n<ul>\n<li>Selective Pod upgrade and Pod deletion (when scale in). These features can be helpful\nwhen Pods spread across different regions or fault domains.</li>\n<li>The ability of taking control over existing Pods with arbitrary names. There are\ncases where Pod creation is done by one controller but Pod lifecycle management\nis done by another controller.</li>\n</ul>\n<p>We found that many containerized applications do not require the <code>Stateful</code> property\nof fixing Pod names and <code>StatefulSet</code> is hard to be extended for those\napplications in some cases. To fill the gap, Kruise is going to release a new controller\ncalled <code>CloneSet</code> to manage the <code>Stateless</code> applications. In a nutshell, <code>CloneSet</code>\nprovides PVC support and enriched rollout strategies and management capabilities.\nThe following table roughly compares Advanced StatefulSet and CloneSet. More\ndetails will be available when <code>CloneSet</code> is released (planned in\n<a href=\"https://github.com/openkruise/kruise/projects\">M4 release</a>).</p>\n<table>\n<thead>\n<tr>\n<th>Features</th>\n<th style=\"text-align:center\">Advanced StatefulSet</th>\n<th style=\"text-align:center\">CloneSet</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PVC</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td>Pod name</td>\n<td style=\"text-align:center\">Ordered</td>\n<td style=\"text-align:center\">Random</td>\n</tr>\n<tr>\n<td>Inplace upgrade</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td>Max unavailable</td>\n<td style=\"text-align:center\">Yes</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td>Selective deletion</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td>Selective upgrade</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n<tr>\n<td>Seize existing Pod</td>\n<td style=\"text-align:center\">No</td>\n<td style=\"text-align:center\">Yes</td>\n</tr>\n</tbody>\n</table>\n<p>Certainly, Kruise will continue to improve <code>Advanced StatefulSet</code>. Had <code>CloneSet</code>\nbeen ready, a clear recommendation to Kruise users would be if your\napplications require fixed Pod names, go with <code>Advanced StatefulSet</code>. Otherwise,\n<code>CloneSet</code> is the primary choice of <strong>Set</strong> -suffix controllers (if <code>DaemonSet</code> is not\napplicable).</p>\n<h3>Summary</h3>\n<p>Kruise aims to come up with intuitive names for new controllers. This post\nprovides additional guidance for Kruise users to pick the right controller for their\napplications. Hope it helps!</p>\n",
  "link": "/en-us/blog/blog1.html",
  "meta": {
    "title": "Kruise Controller Classification Guidance",
    "keywords": "Kubernetes, controller, Pod, StatefulSet",
    "description": "This blog describes how Kruise classifies different controllers. This can help",
    "Kruise users to identify the best workload for their applications.": ""
  }
}