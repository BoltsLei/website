{
  "filename": "components.md",
  "__html": "<h1>OpenKruise components</h1>\n<p>When you install Kruise into a K8s cluster, it means you have created Kruise CRDs and some components.</p>\n<p><img src=\"/img/docs/components.png\" alt=\"OpenKruise components\"></p>\n<h2>CRDs</h2>\n<p>These CRDs will be configured during Kruise installation.</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> kubectl get crd | grep kruise.io</span>\nbroadcastjobs.apps.kruise.io                  2020-06-15T12:00:05Z\nclonesets.apps.kruise.io                      2020-06-15T12:00:05Z\nsidecarsets.apps.kruise.io                    2020-06-15T12:00:05Z\nstatefulsets.apps.kruise.io                   2020-06-15T12:00:05Z\nuniteddeployments.apps.kruise.io              2020-06-15T12:00:05Z\n</code></pre>\n<h2>Kruise-manager</h2>\n<p>Kruise-manager is a control plane component that runs controllers and webhooks, it is deployed by a Deployment in <code>kruise-system</code> namespace.</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> kubectl get deploy -n kruise-system</span>\nNAME                        READY   UP-TO-DATE   AVAILABLE   AGE\nkruise-controller-manager   2/2     2            2           11m\n<span class=\"hljs-meta\">\n$</span><span class=\"bash\"> kubectl get pod -n kruise-system</span>\nNAME                                         READY   STATUS    RESTARTS   AGE\nkruise-controller-manager-78b98899c6-f8t67   1/1     Running   0          11m\nkruise-controller-manager-78b98899c6-tjlxl   1/1     Running   0          11m\n</code></pre>\n<!-- It can be deployed as multiple replicas with Deployment, but only one of them could become leader and start working, others will keep retrying to acquire the lock. -->\n<p>Logically, each controller like cloneset-controller or sidecarset-controller is a separate process, but to reduce complexity, they are all compiled into a single binary and run in the <code>kruise-controller-manager-xxx</code> single Pod.</p>\n<p>Besides controllers, this Pod also contains the admission webhooks for Kruise CRDs and Pod. It creates webhook configurations to configure which resources should be handled, and provides a Service for kube-apiserver calling.</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> kubectl get svc -n kruise-system</span>\nNAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE\nkruise-webhook-server-service       ClusterIP   10.109.43.220    &lt;none&gt;        443/TCP   12m\n</code></pre>\n<p>The <code>kruise-webhook-server-service</code> is much important for kube-apiserver calling.</p>\n<h2>Kruise-daemon</h2>\n<p>This is a <strong>coming</strong> daemon component deployed by DaemonSet, it runs on every node and managing NodeImage resources to pre-pull images.</p>\n",
  "link": "/en-us/docs/components.html",
  "meta": {
    "title": "Components"
  }
}