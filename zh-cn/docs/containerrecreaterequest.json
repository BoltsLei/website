{
  "filename": "containerrecreaterequest.md",
  "__html": "<h1 id=\"containerrecreaterequest\">ContainerRecreateRequest <a class=\"header-anchor\" href=\"#containerrecreaterequest\">#</a></h1>\n<p><strong>FEATURE STATE:</strong> Kruise v0.9.0</p>\n<p>ContainerRecreateRequest 可以帮助用户<strong>重启/重建</strong>存量 Pod 中一个或多个容器。</p>\n<p>和 Kruise 提供的原地升级类似，当一个容器重建的时候，Pod 中的其他容器还保持正常运行。\n重建完成后，Pod 中除了该容器的 restartCount 增加以外不会有什么其他变化。\n注意，之前临时写到旧容器 <strong>rootfs</strong> 中的文件会丢失，但是 volume mount 挂载卷中的数据都还存在。</p>\n<p>这个功能依赖于 <code>kruise-daemon</code> 组件来停止 Pod 容器。\n如果 <code>KruiseDaemon</code> feature-gate 被关闭了，ContainerRecreateRequest 也将无法使用。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\">使用方法 <a class=\"header-anchor\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95\">#</a></h2>\n<h3 id=\"%E6%8F%90%E4%BA%A4%E8%AF%B7%E6%B1%82\">提交请求 <a class=\"header-anchor\" href=\"#%E6%8F%90%E4%BA%A4%E8%AF%B7%E6%B1%82\">#</a></h3>\n<p>为要重建容器的 Pod 提交一个 <code>ContainerRecreateRequest</code> 自定义资源（缩写 <code>CRR</code>）：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps.kruise.io/v1alpha1</span>\n<span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">ContainerRecreateRequest</span>\n<span class=\"hljs-attr\">metadata:</span>\n  <span class=\"hljs-attr\">namespace:</span> <span class=\"hljs-string\">pod-namespace</span>\n  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">xxx</span>\n<span class=\"hljs-attr\">spec:</span>\n  <span class=\"hljs-attr\">podName:</span> <span class=\"hljs-string\">pod-name</span>\n  <span class=\"hljs-attr\">containers:</span>       <span class=\"hljs-comment\"># 要重建的容器名字列表，至少要有 1 个</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">app</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">sidecar</span>\n  <span class=\"hljs-attr\">strategy:</span>\n    <span class=\"hljs-attr\">failurePolicy:</span> <span class=\"hljs-string\">Fail</span>                 <span class=\"hljs-comment\"># 'Fail' 或 'Ignore'，表示一旦有某个容器停止或重建失败， CRR 立即结束</span>\n    <span class=\"hljs-attr\">orderedRecreate:</span> <span class=\"hljs-literal\">false</span>              <span class=\"hljs-comment\"># 'true' 表示要等前一个容器重建完成了，再开始重建下一个</span>\n    <span class=\"hljs-attr\">terminationGracePeriodSeconds:</span> <span class=\"hljs-number\">30</span>   <span class=\"hljs-comment\"># 等待容器优雅退出的时间，不填默认用 Pod 中定义的</span>\n    <span class=\"hljs-attr\">unreadyGracePeriodSeconds:</span> <span class=\"hljs-number\">3</span>        <span class=\"hljs-comment\"># 在重建之前先把 Pod 设为 not ready，并等待这段时间后再开始执行重建</span>\n    <span class=\"hljs-attr\">minStartedSeconds:</span> <span class=\"hljs-number\">10</span>               <span class=\"hljs-comment\"># 重建后新容器至少保持运行这段时间，才认为该容器重建成功</span>\n  <span class=\"hljs-attr\">activeDeadlineSeconds:</span> <span class=\"hljs-number\">300</span>        <span class=\"hljs-comment\"># 如果 CRR 执行超过这个时间，则直接标记为结束（未结束的容器标记为失败）</span>\n  <span class=\"hljs-attr\">ttlSecondsAfterFinished:</span> <span class=\"hljs-number\">1800</span>     <span class=\"hljs-comment\"># CRR 结束后，过了这段时间自动被删除掉</span>\n</code></pre>\n<p><em>所有 <code>strategy</code> 中的字段、以及 <code>spec</code> 中的 <code>activeDeadlineSeconds</code>/<code>ttlSecondsAfterFinished</code> 都是可选的。</em></p>\n<ol>\n<li>一般来说，列表中的容器会一个个被停止，但可能同时在被重建和启动，除非 <code>orderedRecreate</code> 被设置为 <code>true</code>。</li>\n<li><code>unreadyGracePeriodSeconds</code> 功能依赖于 <code>KruisePodReadinessGate</code> 这个 feature-gate 要打开，后者会在每个 Pod 创建的时候注入一个 readinessGate。\n否则，默认只会给 Kruise workload 创建的 Pod 注入 readinessGate，也就是说只有这些 Pod 才能在 CRR 重建时使用 <code>unreadyGracePeriodSeconds</code>。</li>\n</ol>\n<pre><code class=\"language-bash\"><span class=\"hljs-comment\"># for commandline you can</span>\n$ kubectl get containerrecreateqequest -n pod-namespace\n<span class=\"hljs-comment\"># or just short name</span>\n$ kubectl get crr -n pod-namespace\n</code></pre>\n<h3 id=\"%E6%A3%80%E6%9F%A5%E7%8A%B6%E6%80%81\">检查状态 <a class=\"header-anchor\" href=\"#%E6%A3%80%E6%9F%A5%E7%8A%B6%E6%80%81\">#</a></h3>\n<p>CRR status 如下：</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">status:</span>\n  <span class=\"hljs-attr\">completionTime:</span> <span class=\"hljs-string\">\"2021-03-22T11:53:48Z\"</span>\n  <span class=\"hljs-attr\">containerRecreateStates:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">app</span>\n    <span class=\"hljs-attr\">phase:</span> <span class=\"hljs-string\">Succeeded</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">sidecar</span>\n    <span class=\"hljs-attr\">phase:</span> <span class=\"hljs-string\">Succeeded</span>\n  <span class=\"hljs-attr\">phase:</span> <span class=\"hljs-string\">Completed</span>\n</code></pre>\n<p><code>status.phase</code> 包括:</p>\n<ul>\n<li><code>Pending</code>: CRR 等待被执行</li>\n<li><code>Recreating</code>: CRR 正在被执行</li>\n<li><code>Completed</code>: CRR 已经执行完成，完成时间在 <code>status.completionTime</code> 字段可见</li>\n</ul>\n<p>注意，<code>status.phase=Completed</code> 只表示 CRR 完成，并不代表 CRR 中声明的容器都重建成功了，因此还需要检查 <code>status.containerRecreateStates</code> 中的信息。</p>\n<p><code>status.containerRecreateStates[x].phase</code> 包括:</p>\n<ul>\n<li><code>Pending</code>: container 等待被重建</li>\n<li><code>Recreating</code>: container 正在被重建</li>\n<li><code>Failed</code>: container 重建失败，此时 <code>status.containerRecreateStates[x].message</code> 应有错误信息</li>\n<li><code>Succeeded</code>: container 重建成功</li>\n</ul>\n<p><strong>因此，当 CRR 结束了，只有上述 container 状态是 <code>Succeeded</code> phase 的才表示重建成功了。</strong></p>\n<h2 id=\"%E5%AE%9E%E7%8E%B0%E4%BB%8B%E7%BB%8D\">实现介绍 <a class=\"header-anchor\" href=\"#%E5%AE%9E%E7%8E%B0%E4%BB%8B%E7%BB%8D\">#</a></h2>\n<p>当用户创建了一个 CRR，Kruise webhook 会把当时容器的 containerID/restartCount 记录到 <code>spec.containers[x].statusContext</code> 之中。\n在 <strong>kruise-daemon</strong> 执行的过程中，如果它发现实际容器当前的 containerID 与 <code>statusContext</code> 不一致或 restartCount 已经变大，\n则认为容器已经被重建成功了（比如可能发生了一次原地升级）。</p>\n<p><img src=\"/img/docs/containerrecreaterequest.png\" alt=\"ContainerRecreateRequest\"></p>\n<p>一般情况下，<strong>kruise-daemon</strong> 会执行 preStop hook 后把容器停掉，然后 <strong>kubelet</strong> 感知到容器退出，则会新建一个容器并启动。\n最后 <strong>kruise-daemon</strong> 看到新容器已经启动成功超过 <code>minStartedSeconds</code> 时间后，会上报这个容器的 phase 状态为 <code>Succeeded</code>。</p>\n<p>如果容器重建和原地升级操作同时触发了：</p>\n<ul>\n<li>如果 <strong>Kubelet</strong> 根据原地升级要求已经停止或重建了容器，<strong>kruise-daemon</strong> 会判断容器重建已经完成。</li>\n<li>如果 <strong>kruise-daemon</strong> 先停了容器，<strong>Kubelet</strong> 会继续执行原地升级，即创建一个新版本容器并启动。</li>\n</ul>\n<p>如果针对一个 Pod 提交了多个 ContainerRecreateRequest 资源，会按时间先后一个个执行。</p>\n",
  "link": "/zh-cn/docs/containerrecreaterequest.html",
  "meta": {
    "title": "ContainerRecreateRequest"
  }
}