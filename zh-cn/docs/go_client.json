{
  "filename": "go_client.md",
  "__html": "<h1>Golang client</h1>\n<p>如果要在一个 Golang 项目中对 OpenKruise 的资源做 create/get/update/delete 这些操作、或者通过 informer 做 list-watch，你需要一个支持 OpenKruise 的 client。</p>\n<p>尽管 Kruise 在 <a href=\"https://github.com/openkruise/kruise/tree/master/pkg/client\">pkg/client</a> 目录中已经生成了一些 clientset/informers/listers 工具，但我们强烈不推荐用户使用这些。因为如果把整个 Kruise 仓库引入到你的项目中，可能会导致 go mod 依赖非常复杂，有些还会关系到 K8s 依赖版本问题。</p>\n<p>我们推荐用户只使用 <a href=\"https://github.com/openkruise/kruise-api\">kruise-api</a> 仓库，它只包含了 Kruise 中自定义资源的 API schema 定义。</p>\n<p><a href=\"https://github.com/openkruise/kruise-api\">kruise-api</a> 专门用来放置 Kruise APi 定义，它是从 <code>https://github.com/openkruise/kruise/tree/master/pkg/apis</code> 中同步过来的。所有的代码改动都是在后者里提交的，前者是只读的仓库。</p>\n<h2>使用方式</h2>\n<p><a href=\"https://github.com/kubernetes-sigs/controller-runtime\">controller-runtime</a> 是最好的使用 <code>kruise-api</code> 的方式：</p>\n<ul>\n<li>如果你的项目是通过 <a href=\"https://github.com/kubernetes-sigs/kubebuilder\">kubebuilder</a> 或 <a href=\"https://github.com/operator-framework/operator-sdk\">operator-sdk</a> 生成的，表明你已经使用了 <code>controller-runtime</code>。</li>\n<li>否则，你需要将它和 kruise-api 一起加入到你的 <code>go.mod</code> 中。</li>\n</ul>\n<h3>1. 添加 kruise scheme</h3>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> kruiseapps <span class=\"hljs-string\">\"github.com/openkruise/kruise-api/apps/v1alpha1\"</span>\n\n<span class=\"hljs-comment\">// ...</span>\n_ = kruiseapps.AddToScheme(scheme)\n</code></pre>\n<h3>2. 生成 client</h3>\n<p>这一步在你直接使用 controller-runtime client 的时候才需要。</p>\n<p>如果你的项目是通过 <a href=\"https://github.com/kubernetes-sigs/kubebuilder\">kubebuilder</a> 或 <a href=\"https://github.com/operator-framework/operator-sdk\">operator-sdk</a> 生成的，你应该直接用 <code>mgr.GetClient()</code> 来获取 client，就不需要以下这个步骤了。</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">\"sigs.k8s.io/controller-runtime/pkg/client\"</span>\n\napiClient, err := client.New(c, client.Options{Scheme: scheme})\n</code></pre>\n<h3>3. Get/List</h3>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> (\n    kruiseapps <span class=\"hljs-string\">\"github.com/openkruise/kruise-api/apps/v1alpha1\"</span>\n    <span class=\"hljs-string\">\"sigs.k8s.io/controller-runtime/pkg/client\"</span>\n)\n\ncloneSet := kruiseapps.CloneSet{}\nerr = apiClient.Get(context.TODO(), types.NamespacedName{Namespace: namespace, Name: name}, &amp;cloneSet)\n\ncloneSetList := kruiseapps.CloneSetList{}\nerr = apiClient.List(context.TODO(), &amp;cloneSetList, client.InNamespace(instance.Namespace))\n</code></pre>\n<h3>4. Create/Update/Delete</h3>\n<p>创建一个 CloneSet：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> kruiseapps <span class=\"hljs-string\">\"github.com/openkruise/kruise-api/apps/v1alpha1\"</span>\n\ncloneSet := kruiseapps.CloneSet{\n    <span class=\"hljs-comment\">// ...</span>\n}\nerr = apiClient.Create(context.TODO(), &amp;cloneSet)\n</code></pre>\n<p>基于一个存量的 CloneSet 来更新：</p>\n<pre><code class=\"language-go\"><span class=\"hljs-keyword\">import</span> kruiseapps <span class=\"hljs-string\">\"github.com/openkruise/kruise-api/apps/v1alpha1\"</span>\n\n<span class=\"hljs-comment\">// Get first</span>\ncloneSet := kruiseapps.CloneSet{}\n<span class=\"hljs-keyword\">if</span> err = apiClient.Get(context.TODO(), types.NamespacedName{Namespace: namespace, Name: name}, &amp;cloneSet); err != <span class=\"hljs-literal\">nil</span> {\n    <span class=\"hljs-keyword\">return</span> err\n}\n\n<span class=\"hljs-comment\">// Modify object, such as replicas or template</span>\ncloneSet.Spec.Replicas = utilpointer.Int32Ptr(<span class=\"hljs-number\">5</span>)\n\n<span class=\"hljs-comment\">// Update</span>\n<span class=\"hljs-comment\">// This might get conflict, should retry it</span>\n<span class=\"hljs-keyword\">if</span> err = apiClient.Update(context.TODO(), &amp;cloneSet); err != <span class=\"hljs-literal\">nil</span> {\n    <span class=\"hljs-keyword\">return</span> err\n}\n</code></pre>\n<h3>5. List watch and informer</h3>\n<p>如果你的项目是通过 <a href=\"https://github.com/kubernetes-sigs/kubebuilder\">kubebuilder</a> 或 <a href=\"https://github.com/operator-framework/operator-sdk\">operator-sdk</a> 生成的，并且使用了 <code>mgr.GetClient()</code>，那么当你使用 <code>Get</code>/<code>List</code> 这些操作时就已经是从 informer 中查询了，而不是调用的 kube-apiserver。</p>\n",
  "link": "/zh-cn/docs/go_client.html",
  "meta": {
    "title": "Golang 客户端"
  }
}